{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "devops-test",
    "Parameters": {
        "KeyName": {
            "Description": "KeyPair Name for the EC2 Instances.",
            "Type": "String",
            "Default": "****",
            "ConstraintDescription": "Must be an existing Key Pair."
        },
        "InstanceType": {
            "Description": "EC2 instance type",
            "Type": "String",
            "Default": "m4.large",
            "ConstraintDescription" : "Must be an m4.large due to encrypted EBS volumes."
        },
        "Subnets": {
            "Description": "Subnet for ",
            "Type": "CommaDelimitedList",
            "Default": "********"
        },
        "SecurityGroup": {
            "Description": "ID of SecurityGroup",
            "Type": "String",
            "Default": "********",
            "ConstraintDescription": "Security Group must already exist."
        },
        "AvailabilityZones": {
            "Default": "us-east-1a,us-east-1b",
            "Description": "Comma separated list of availability zones (MUST MATCH Subnets Parameter)",
            "Type": "CommaDelimitedList"
        },
         "MinAppCount": {
            "Description": "Minimum number of EC2 instances to launch.",
            "Type": "Number",
            "Default": "1",
            "MinValue": "1",
            "MaxValue": "4"
        },
        "MaxAppCount": {
            "Description": "Maximum number of EC2 instances to launch.",
            "Type": "Number",
            "Default": "4",
            "MinValue": "1",
            "MaxValue": "4"
        },
        "ScaleUp": {
            "Description": "CPU Percentage to Scale Up.",
            "Type": "Number",
            "Default": "60",
            "MinValue": "10",
            "MaxValue": "100"
        },
        "ScaleDown": {
            "Description": "CPU Percentage to Scale Down.",
            "Type": "Number",
            "Default": "20",
            "MinValue": "10",
            "MaxValue": "100"
        }
    },
    "Mappings": {
        "AWSRegionArch2AMI": {
            "us-east-1": {
                "64": "ami-*****"
            }
        }
    },
    "Resources": {
        "devops-testAppASG": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "UpdatePolicy": {
                "AutoScalingRollingUpdate": {
                    "MinInstancesInService": "1",
                    "MaxBatchSize": "1",
                    "PauseTime": "PT10M0S"
                }
            },
            "Properties": {
                "VPCZoneIdentifier": {
                        "Ref": "Subnets"
                },
                "LaunchConfigurationName": {
                    "Ref": "AppLaunchConfig"
                },
                "MaxSize": {
                    "Ref": "MaxAppCount"
                },
                "MinSize": {
                    "Ref": "MinAppCount"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "***********",
                        "PropagateAtLaunch": "true"
                    },
                    {
                        "Key": "Application Name",
                        "Value": "**********",
                        "PropagateAtLaunch": "true"
                    },
                    {
                        "Key": "Environment",
                        "Value": "DEV",
                        "PropagateAtLaunch": "true"
                    }
                ]
            },
            "DependsOn": []
        },
        "AppLaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSRegionArch2AMI",
                        {
                            "Ref": "AWS::Region"
                        },
                        "64"
                    ]
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "SecurityGroups": [
                    {
                        "Ref": "SecurityGroup"
                    }
                ],
                "BlockDeviceMappings": [
                {
                    "DeviceName": "/dev/sdg",
                    "Ebs": {
                        "VolumeSize": "30",
                        "VolumeType": "gp2",
                        "SnapshotId": "**********",
                        "DeleteOnTermination": "true"
                    }
                }
                ],
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                "#!/bin/bash -ex \n",
                "exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1 \n",
                "export HOSTNAME=$( curl 169.254.169.254/latest/meta-data/local-hostname/ )\n",

                "#Install Sinatra for ruby app to work\n",
                " sudo gem install sinatra \n",

                "#Get ruby code from github \n",

                "if [[ ", { "Ref" : "Env" }, " == \"DEV\" ]] ; then \n",
                "mkdir -p  /var/apps ; cd /var/apps; git clone https://github.com/sumitnitb/devops-test.git \n",
                "elif [[ ", { "Ref" : "Env" }, " == \"QA\" ]] ; then \n",
                "mkdir -p  /var/apps ; cd /var/apps; git clone https://github.com/sumitnitb/devops-test.git \n",
                "elif [[ ", { "Ref" : "Env" }, " == \"Prod\" ]] ; then \n",
                "mkdir -p  /var/apps ; cd /var/apps; git clone https://github.com/sumitnitb/devops-test.git \n",
                "fi \n",

                "# start the Ruby Application",
                "nohup /usr/bin/ruby /var/apps/devops-test/app.rb -o 0.0.0.0 & \n",

                            ]
                        ]
                    }
                }
            }
        },
        "CPUAlarmHigh": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": "Scale-up if CPU is high for 5 minutes",
                "MetricName": "CPUUtilization",
                "Namespace": "AWS/EC2",
                "Statistic": "Average",
                "Period": "60",
                "EvaluationPeriods": "5",
                "Threshold": {
                    "Ref": "ScaleUp"
                },
                "AlarmActions": [
                    {
                        "Ref": "ScaleUpPolicy"
                    }
                ],
                "OKActions": [],
                "Dimensions": [
                    {
                        "Name": "AutoScalingGroupName",
                        "Value": {
                            "Ref": "AppLaunchConfig"
                        }
                    }
                ],
                "ComparisonOperator": "GreaterThanThreshold"
            }
        },
        "CPUAlarmNormal": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": "Scale-down if CPU is low for 15 minutes",
                "MetricName": "CPUUtilization",
                "Namespace": "AWS/EC2",
                "Statistic": "Average",
                "Period": "60",
                "EvaluationPeriods": "15",
                "Threshold": {
                    "Ref": "ScaleDown"
                },
                "AlarmActions": [
                    {
                        "Ref": "ScaleDownPolicy"
                    }
                ],
                "OKActions": [],
                "Dimensions": [
                    {
                        "Name": "AutoScalingGroupName",
                        "Value": {
                            "Ref": "AppLaunchConfig"
                        }
                    }
                ],
                "ComparisonOperator": "LessThanThreshold"
            }
        },
        "ScaleUpPolicy": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
                "AdjustmentType": "ChangeInCapacity",
                "AutoScalingGroupName": {
                    "Ref": "devops-testAppASG"
                },
                "Cooldown": "60",
                "ScalingAdjustment": "1"
            }
        },
        "ScaleDownPolicy": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
                "AdjustmentType": "ChangeInCapacity",
                "AutoScalingGroupName": {
                    "Ref": "devops-testAppASG"
                },
                "Cooldown": "60",
                "ScalingAdjustment": "-1"
            }
        }
    }
}
